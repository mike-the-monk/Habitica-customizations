// TABLE OF CONTENTS
  // 1. API basics – functions made directly from Habitica's API. Each individual script probably won't use all of these, but that's okay.
  // 2. Non-API functions 
    // 2A. Basics – functions that can be used in a wide variety of scripts
    // 2B. Skills – functions used to make custom skills
    // 2X. Debug functions – while the specific kind of debug function depends greatly on the script, they do share some commonalities
  // 3. Idiosyncratic functions – functions that are used only in a single script.
    // If a script has no idiosyncratic functions (i.e. all its functions are accounted for in the above categories), it will not be listed in this section.
    // Not listed here: Dueling Script – Announcer Bot, since you run that script from a secondary/bot account, not your main account, and thus won't run it alongside any other scripts.
    // 3A. Editable Fix Character Values Buttons
    // 3B. Dueling Script – Scoring
    // 3C. Transform Yourself Year-Round

// 1. API BASICS

  // CHALLENGE

  // CHAT

    // Gets chat messages given a Group ID
    function api_getChatMessagesFromGroup(groupId) {
      const params = {
        "method" : "get",
        "headers" : HEADERS,
        "muteHttpExceptions" : true,
      }

      const url = "https://habitica.com/api/v3/groups/" + groupId + "/chat"

      return UrlFetchApp.fetch(url, params)
    }

    // Posts a chat message to a group
    function api_postChatMessageToGroup(payload, groupId) {
      const params = {
        "method" : "post",
        "headers" : HEADERS,
        "contentType" : "application/json",
        "payload" : JSON.stringify(payload),
        "muteHttpExceptions" : true,
      }
      const url = "https://habitica.com/api/v3/groups/" + groupId + "/chat"
      return UrlFetchApp.fetch(url, params)
    }

    // Deletes a chat message
    function api_deleteChatMessage(groupId, chatId) {
      const params = {
        "method" : "delete",
        "headers" : HEADERS,
        "muteHttpExceptions" : true,
      }

      var url = "https://habitica.com/api/v3/groups/"
      if (groupId != "") {
        url += groupId
        url += "/chat/"
        if (chatId != "") {
          url += chatId
        }
      }
      return UrlFetchApp.fetch(url, params);
    }

  // CONTENT

    // Gets equipment info
    function apiFree_getAllAvailableContentObjects() {
      const params = {
        "method" : "get",
        "muteHttpExceptions" : true,
      }

      const url = "https://habitica.com/api/v3/content"
      return UrlFetchApp.fetch(url, params)
    }

  // DATA EXPORT

  // GROUP
  
    // Gets all of a user's Groups (Guilds or party)
    function api_getGroups(payload) {
      const params = {
        "method" : "get",
        "headers" : HEADERS,
        "contentType" : "application/json",
        "payload" : JSON.stringify(payload),
        "muteHttpExceptions" : true,
      }
      
      const url = "https://habitica.com/api/v3/groups"
      return UrlFetchApp.fetch(url, params)
    }

    // Gets Party ID of user's party
    function getParty(){
      let paramsTemplate = {
          "method": "get",
          "headers": HEADERS,
      }
      let response = UrlFetchApp.fetch("https://habitica.com/api/v3/groups/party", paramsTemplate)
      let party = JSON.parse(response).data
      let partyId = party._id
      
      return partyId
    }

  // INBOX

  // MEMBER

    // Send a notification as a private message, only if they're enabled
    function api_sendPrivateMessage(payload) {
      switch (NOTIFICATIONS_ON){ // Check if notifications are on, send message if yes
        case 0:
          break        
        case 1:
          const params = {
            "method" : "post",
            "headers" : HEADERS,
            "contentType" : "application/json",
            "payload" : JSON.stringify(payload),
            "muteHttpExceptions" : true,
          }
          const url = "https://habitica.com/api/v3/members/send-private-message"
          return UrlFetchApp.fetch(url, params)
      }
    }

    // Send a notification as a private message regardless of if they're enabled
    function api_sendPrivateMessageAlways(payload) {
      const params = {
        "method" : "post",
        "headers" : HEADERS,
        "contentType" : "application/json",
        "payload" : JSON.stringify(payload),
        "muteHttpExceptions" : true,
      }
      const url = "https://habitica.com/api/v3/members/send-private-message"
      return UrlFetchApp.fetch(url, params)
    }

  // NOTIFICATION

  // QUEST

  // TAG

    // Create a new tag if it hasn't been done yet, get its ID if it has
    function apiMult_createNewTagNoDuplicates(tagName){
      const response = api_getTags()
      const tags = JSON.parse(response).data

      // Initialize these
      let duplicateExists = 0
      let tagId = "newlyCreated"

      for (var i in tags) {
        if (tags[i].name == tagName) {
          duplicateExists++

          // If there is a match, grab the tag ID
          tagId = tags[i].id
        }
      }

      // If no duplicate, create new tag
      if (duplicateExists == 0) {
        api_createNewTag({"name": tagName})
      } 

      return tagId
    }

    // Gets all of a user's tags
    function api_getTags() {
      const params = {
        "method" : "get",
        "headers" : HEADERS,
        "muteHttpExceptions" : true,
      }

      const url = "https://habitica.com/api/v3/tags"
      return UrlFetchApp.fetch(url, params)
    }

    // Create new tag
    function api_createNewTag(payload) {
      const params = {
        "method" : "post",
        "headers" : HEADERS,
        "contentType" : "application/json",
        "payload" : JSON.stringify(payload),
        "muteHttpExceptions" : true,
      }

      const url = "https://habitica.com/api/v3/tags"
      return UrlFetchApp.fetch(url, params)
    }

  // TASK

    // Create custom tasks, including reward buttons
    function api_createNewTaskForUser(payload) {
      var params = {
        "method" : "post",
        "headers" : HEADERS,
        "contentType" : "application/json",
        "payload" : JSON.stringify(payload), // Rightmost button goes on top
        "muteHttpExceptions" : true,
      }

      var url = "https://habitica.com/api/v3/tasks/user"
      UrlFetchApp.fetch(url, params)
    }

      // Gets user tasks
    function api_getUserTasks(type) {
      const params = {
        "method" : "get",
        "headers" : HEADERS,
        "muteHttpExceptions" : true,
      }

      var url = "https://habitica.com/api/v3/tasks/user"
      if (type != "") {
        url += "?type=" + type
      }

      return UrlFetchApp.fetch(url, params)
    }

    // Score a task
    function api_scoreTask(aliasOrId, direction) {
      var params = {
        "method" : "post",
        "headers" : HEADERS,
        "muteHttpExceptions" : true,
      }

      var url = "https://habitica.com/api/v3/tasks/"
      if ( (aliasOrId != "") && (direction != "") ) {
        url += aliasOrId + "/score/" + direction
      }
      return UrlFetchApp.fetch(url, params)
    }

    // Updates a task
    function api_updateTask(taskIdOrAlias, payload) {
      const params = {
        "method" : "put",
        "headers" : HEADERS,
        "contentType" : "application/json",
        "payload" : JSON.stringify(payload),
        "muteHttpExceptions" : true,
      }

      const url = "https://habitica.com/api/v3/tasks/" + taskIdOrAlias
      return UrlFetchApp.fetch(url, params)
    }

    // Deletes a task
    function api_deleteTask(taskIdOrAlias) {
      const params = {
        "method" : "delete",
        "headers" : HEADERS,
        "muteHttpExceptions" : true,
      }

      var url = "https://habitica.com/api/v3/tasks/"
      if (taskIdOrAlias != "") {
        url += taskIdOrAlias
      }
      return UrlFetchApp.fetch(url, params)
    }
    
    // Add a tag to a task
    function api_addTagToTask(taskIdOrAlias, tagId){
      const params = {
        "method" : "post",
        "headers" : HEADERS,
        "muteHttpExceptions" : true,
      }

      var url = "https://habitica.com/api/v3/tasks/"
      if ( (taskIdOrAlias != "") && (taskIdOrAlias != undefined) && (taskIdOrAlias != null) ) {
        url += taskIdOrAlias + "/tags/"

        if ( (tagId != "") && (tagId != undefined) && (tagId != null) ) {
          url += tagId
        }
      }
      return UrlFetchApp.fetch(url, params)
    }

  // USER

    // Gets user info so I can use it, especially stats like mana, experience, and level
    function api_getAuthenticatedUserProfile(userFields) {
      const params = {
        "method" : "get",
        "headers" : HEADERS,
        "muteHttpExceptions" : true,
      }

      var url = "https://habitica.com/api/v3/user"
      if (userFields != "") {
        url += "?userFields=" + userFields
      }

      return UrlFetchApp.fetch(url, params)
    }

    // Changes stats
    function api_updateUser(payload) { 
      const params = {
        "method" : "put",
        "headers" : HEADERS,
        "contentType" : "application/json",
        "payload" : JSON.stringify(payload),
        "muteHttpExceptions" : true,
      }

      const url = "https://habitica.com/api/v3/user"
      return UrlFetchApp.fetch(url, params)
    }

  // WEBHOOK

    // Create a webhook if no duplicate exists
    function apiMult_createNewWebhookNoDuplicates(payload) {
      const response = api_getWebhooks()
      const webhooks = JSON.parse(response).data
      var duplicateExists = 0

      for (var i in webhooks) {
        if (webhooks[i].label == payload.label) {
          duplicateExists = 1
        }
      }
      // If webhook to be created doesn't exist yet
      if (!duplicateExists) {
        api_createNewWebhook(payload)
      }
    }

    // Used to see existing webhooks, and therefore if there's a duplicate
    function api_getWebhooks() {
      const params = {
        "method" : "get",
        "headers" : HEADERS,
        "muteHttpExceptions" : true,
      }

      const url = "https://habitica.com/api/v3/user/webhook"
      return UrlFetchApp.fetch(url, params)
    }

    // Creates a webhook (as part of the "don't make it if there's a duplicate" function)
    function api_createNewWebhook(payload) {
      const params = {
        "method" : "post",
        "headers" : HEADERS,
        "contentType" : "application/json",
        "payload" : JSON.stringify(payload),
        "muteHttpExceptions" : true,
      }

      const url = "https://habitica.com/api/v3/user/webhook"
      return UrlFetchApp.fetch(url, params)
    }
    
    // Updates webhook
    function api_updateWebhook(webhookUrl, payload){
      const params = {
        "method" : "put",
        "headers" : HEADERS,
        "contentType" : "application/json",
        "payload" : JSON.stringify(payload),
        "muteHttpExceptions" : true,
      }

      const url = "https://habitica.com/api/v3/user/webhook/" + webhookUrl
      return UrlFetchApp.fetch(url, params)
    }
