// TABLE OF CONTENTS
  // 1. API basics – functions made directly from Habitica's API. Each individual script probably won't use all of these, but that's okay.
  // 2. Non-API functions 
    // 2A. Basics – functions that can be used in a wide variety of scripts
    // 2B. Skills – functions used to make custom skills
    // 2X. Debug functions – while the specific kind of debug function depends greatly on the script, they do share some commonalities
  // 3. Idiosyncratic functions – functions that are used only in a single script.
    // If a script has no idiosyncratic functions (i.e. all its functions are accounted for in the above categories), it will not be listed in this section.
    // Not listed here: Dueling Script – Announcer Bot, since you run that script from a secondary/bot account, not your main account, and thus won't run it alongside any other scripts.
    // 3A. Editable Fix Character Values Buttons
    // 3B. Dueling Script – Scoring
    // 3C. Transform Yourself Year-Round

// 3. IDIOSYNCRATIC FUNCTIONS
  // If a script has no idiosyncratic functions (i.e. all its functions are accounted for in the above categories), that script will not be listed in this section.
  
  // 3B. DUELING SCRIPT – SCORING

    // Check if there's supposed to be a tag for the task, add if yes. Create tag if needed.
    function checkAndAddTagToTask(taskIdOrAlias, optionalSecondTaskIdOrAlias){
      if (TAG_FOR_DUEL_BUTTONS != "typeTagHere"){    
        var tagId = apiMult_createNewTagNoDuplicates(TAG_FOR_DUEL_BUTTONS);
        
        // If the function created the tag anew, it did not grab its ID yet. Do so now.
        if (tagId == "newlyCreated") {
          tagId = apiMult_createNewTagNoDuplicates(TAG_FOR_DUEL_BUTTONS);
        }
        
        // Add the tag to the task(s)
        api_addTagToTask(taskIdOrAlias, tagId);
        if (optionalSecondTaskIdOrAlias != "none"){
          api_addTagToTask(optionalSecondTaskIdOrAlias, tagId);
        }
      }
    }

    // Finds if the automated message was posted or not
    function findAutomatedDuelEndMessages(version, guildId, msgIdEarliestAllowed, earliestAllowedTimestamp, announcerBotUsername, searchTerm){
      // Initialize so it defaults to the error condition
      let msgId = "nope";
      
      // Grab messages from Guild
      let response = api_getChatMessagesFromGroup(guildId);
      let chatMessages = JSON.parse(response).data;
            
      // For "bot" version, I need to find timestamp of the user's automated chat message
      if (version == "bot") {
        for (var i in chatMessages) {
          if (chatMessages[i]._id == msgIdEarliestAllowed) {
            earliestAllowedTimestamp = chatMessages[i].timestamp;
          }
        }
      }
      
      // Look for messages posted at or after the earliest allowed timestamp
      for (var i in chatMessages) {
        if (chatMessages[i].timestamp >= earliestAllowedTimestamp) {
          // This version is to look for the automated message from the user
          if (version == "user") {
            // Look for messages the user posted
            if (chatMessages[i].uuid == USER_ID) {
              let text = chatMessages[i].text;
              
              // See if both search terms are found (automated message and bot username)
              let autoMsgIndex = findIndex(searchTerm, text);
              let botIndex = findIndex(announcerBotUsername, text);
              
              if ( (botIndex != -1) && (autoMsgIndex != -1) ) {
                msgId = chatMessages[i]._id;
              } 
            }
          } else if (version == "bot") {
            // For this one, I need to remove the @ symbol from announcer bot username
            let untaggedAnnouncerBotUsername = checkFirstCharacter(announcerBotUsername);
            let text = chatMessages[i].text;
            
            // Look for messages the bot posted
            if (chatMessages[i].username == untaggedAnnouncerBotUsername) {
              // See if search term is found
              let botMsgIndex = findIndex(searchTerm, text);
              if (botMsgIndex != -1) {
                msgId = chatMessages[i]._id;
              }
            }
          } 
        }
      }
      
      return msgId;
    }

    // Creates Duel End string for duel bot to check/evaluate
    function createDuelEndString(selfUsernameKey, opponentUsernameKey, wagerKey, scoreNeededGoalKey, announcerBotUsernameKey, timestampIdentifierKey){
      // Retrieve saved values
      var selfUsername = scriptProperties.getProperty(selfUsernameKey); 
      var opponentUsername = scriptProperties.getProperty(opponentUsernameKey);
      var wager = Number(scriptProperties.getProperty(wagerKey));
      var scoreNeededGoal = Number(scriptProperties.getProperty(scoreNeededGoalKey));
      var announcerBotUsername = scriptProperties.getProperty(announcerBotUsernameKey);
      var timestampIdentifier = Number(scriptProperties.getProperty(timestampIdentifierKey));
      
      // Combine self&opponent usernames, then sort characters alphabetically.
      // This will ensure it's the same regardless of which participant is "self" and which is "opponent"
      let alphabeticalCombinedUsernames = alphabetizeString(selfUsername, opponentUsername);
      
      // Create string of all duel parameters.
      let SEMICOLON = ";";
      let ALL_PARAMETERS = alphabeticalCombinedUsernames + SEMICOLON + wager + SEMICOLON + scoreNeededGoal + SEMICOLON
      + timestampIdentifier + SEMICOLON;
      
      // Create a string of both the usernames. Ends in a period for easier parsing.
      let bothUsernames = selfUsername + SEMICOLON + opponentUsername + SEMICOLON + ".";
      
      // Create hashes
      let hashAll = createHash(ALL_PARAMETERS);
      let hashSelfUserId = createHash(USER_ID); // for indicating who won
      let hashSum = hashAll + hashSelfUserId; // So I don't directly expose the hash of the user ID (mostly for anti-cheating purposes)
      
      // Create string of hashes. Ends in a period for easier parsing.
      let HASHES = hashAll + SEMICOLON + hashSum + SEMICOLON +  ".";
      
      // Generate victory string. Post message to guild and tag bot. Bot will be the one to declare victory (after checking if the string is valid)
      let DUEL_END_MSG = announcerBotUsername + "\nEND DUEL\n." + ALL_PARAMETERS + "." + bothUsernames + HASHES;
      
      return DUEL_END_MSG;
    }

    // Checks if string is valid, returns error messages if not. Same with GP for wager. If valid, saves all duel values and starts duel.
    function parseDuelStartString(inputString, buttonToDeleteTaskId, duelCurrentlyActiveKey, duelScoreKey, selfUsernameKey, opponentUsernameKey, wagerKey, scoreNeededGoalKey, guildIdKey, announcerBotUsernameKey, timestampIdentifierKey) { 
      // Count number of semicolons. 7 are expected.
      var countSemicolons = ( inputString.match(/\;/g) || [] ).length;
      
      // Send error message if there aren't 7 semicolons. Otherwise, parse string.
      if ( countSemicolons != 7 ) {
        api_sendPrivateMessageAlways({"message" : ERROR_MSG_SEMICOLONS_START + countSemicolons + ERROR_MSG_SEMICOLONS_END, "toUserId" : USER_ID});
      } else if ( countSemicolons == 7 ) {
        
        // Initialize some values so I can use them later
        let length = inputString.length;
        let semicolonIndex = 0;
      
        // Use first semicolon to parse out self username
        semicolonIndex = findIndexOfSemicolon(inputString);
        let selfUsernameTemp = createSubstring(inputString, 0, semicolonIndex);
        
        // Check if first character is @. If not, add it.
        let selfUsername = checkNameFormatting(selfUsernameTemp);
        
        // Remove that section from the input string, save as a smaller substring
        let inputStringTemp = createSubstring(inputString, semicolonIndex + 1, length);
        inputString = inputStringTemp;
        length = inputString.length;
        
        // Repeat to parse out opponent username
        semicolonIndex = findIndexOfSemicolon(inputString);
        let opponentUsernameTemp = createSubstring(inputString, 3, semicolonIndex); // Start at index 3 because of "vs."
        
        // Check if first character is @. If not, add it.
        let opponentUsername = checkNameFormatting(opponentUsernameTemp);
        
        // Remove that section from the input string, save as a smaller substring
        inputStringTemp = createSubstring(inputString, semicolonIndex + 1, length);
        inputString = inputStringTemp;
        length = inputString.length;
        
        // Repeat to parse out wager
        semicolonIndex = findIndexOfSemicolon(inputString);
        let wagerTemp = createSubstring(inputString, 0, semicolonIndex);
        
        // If it's not a number, the function will return -2
        let wager = checkIfNumber(wagerTemp);
        
        // I'll keep parsing the substring in case there are other errors.
        
        // Remove that section from the input string, save as a smaller substring
        inputStringTemp = createSubstring(inputString, semicolonIndex + 1, length);
        inputString = inputStringTemp;
        length = inputString.length;
        
        // Repeat to parse out Score Needed / Goal
        semicolonIndex = findIndexOfSemicolon(inputString);
        let scoreNeededGoalTemp = createSubstring(inputString, 0, semicolonIndex);
        
        // If it's not a number, the function will return -2
        let scoreNeededGoal = checkIfNumber(scoreNeededGoalTemp);

        // I'll keep parsing the substring in case there are other errors.
        
        // Remove that section from the input string, save as a smaller substring
        inputStringTemp = createSubstring(inputString, semicolonIndex + 1, length);
        inputString = inputStringTemp;
        length = inputString.length;
        
        // Repeat to parse out Timestamp identifier
        semicolonIndex = findIndexOfSemicolon(inputString);
        let timestampIdentifierTemp = createSubstring(inputString, 0, semicolonIndex);
        
        // If it's not a number, the function will return -2
        let timestampIdentifier = checkIfNumber(timestampIdentifierTemp);
        
        // Remove that section from the input string, save as a smaller substring
        inputStringTemp = createSubstring(inputString, semicolonIndex + 1, length);
        inputString = inputStringTemp;
        length = inputString.length;
        
        // Repeat to parse out Guild ID
        semicolonIndex = findIndexOfSemicolon(inputString);
        let guildId = createSubstring(inputString, 0, semicolonIndex);
        
        // Check to make sure it's a valid format for a Guild ID
        let guildIdFormatCheck = checkGuildIdFormat(guildId);
        
        // Remove that section from the input string, save as a smaller substring
        inputStringTemp = createSubstring(inputString, semicolonIndex + 1, length);
        inputString = inputStringTemp;
        length = inputString.length;
        
        // Repeat to parse out Bot Announcer ID
        semicolonIndex = findIndexOfSemicolon(inputString);
        let announcerBotUsernameTemp = createSubstring(inputString, 0, semicolonIndex);
        
        // Check if first character is @. If not, add it.
        let announcerBotUsername = checkNameFormatting(announcerBotUsernameTemp);

        // If there are any errors, let user know by sending messages.
        let errorsNotPresent = checkDuelStartErrors(wager, scoreNeededGoal, timestampIdentifier, guildIdFormatCheck);
        
        // If no errors, check GP and start duel
        if (errorsNotPresent) {
          checkGpAndStartDuel(buttonToDeleteTaskId, duelCurrentlyActiveKey, duelScoreKey, selfUsernameKey, selfUsername, opponentUsernameKey, opponentUsername, wagerKey, wager, scoreNeededGoalKey, scoreNeededGoal, guildIdKey, guildId, announcerBotUsernameKey, announcerBotUsername, timestampIdentifierKey, timestampIdentifier);
        }
      }
    }

    // If errors exist in Duel Start string, sends messages.
    function checkDuelStartErrors(wager, scoreNeededGoal, timestampIdentifier, guildIdFormatCheck) {
      // Initialize Booleans
      let wagerIsError = false;
      let scoreNeededGoalIsError = false;
      let timestampIdentifierIsError = false;
      let guildIdError = false;
      
      let errorCount = 0;
      
      if (wager == -2) {
        wagerIsError = true;
        errorCount++;
      }
      if (scoreNeededGoal == -2) {
        scoreNeededGoalIsError = true;
        errorCount++;
      }
      if (timestampIdentifier == -2) {
        timestampIdentifierIsError = true;
        errorCount++;
      }
      if (!guildIdFormatCheck) { // This one was already a Boolean
        guildIdError = true;
        errorCount++;
      }
      
      if (errorCount == 0) {
        return true; // Indicates no errors
      } 
      else { // Message differs if there's one error or multiple.
        if ( errorCount == 1 ) {
          // Message tells user location of error
          if (wagerIsError) {
            api_sendPrivateMessageAlways({"message" : ERROR_MSG_SINGULAR_START + ERROR_MSG_WAGER + ERROR_MSG_SINGULAR_END, "toUserId" : USER_ID});
          } else if (scoreNeededGoalIsError) {
            api_sendPrivateMessageAlways({"message" : ERROR_MSG_SINGULAR_START + ERROR_MSG_SCORE_NEEDED + ERROR_MSG_SINGULAR_END, "toUserId" : USER_ID});
          } else if (timestampIdentifierIsError) {
            api_sendPrivateMessageAlways({"message" : ERROR_MSG_SINGULAR_START + ERROR_MSG_TIMESTAMP_IDENTIFIER + ERROR_MSG_SINGULAR_END, "toUserId" : USER_ID});
          } else if (guildIdError) {
            api_sendPrivateMessageAlways({"message" : ERROR_MSG_SINGULAR_START + ERROR_MSG_GUILD_ID + ERROR_MSG_SINGULAR_END, "toUserId" : USER_ID});
          } else {
            api_sendPrivateMessageAlways({"message" : ERROR_MSG_SINGULAR_START + "UNKNOWN" + ERROR_MSG_SINGULAR_END, "toUserId" : USER_ID});
          }
        } 
        else {
          // If 4 errors, all 4 locations are the cause.
          if ( errorCount == 4 ) {
            api_sendPrivateMessageAlways({"message" : ERROR_MSG_PLURAL_START + errorCount + ERROR_MSG_PLURAL_MID
                                          + ERROR_MSG_WAGER + ERROR_MSG_AND + ERROR_MSG_SCORE_NEEDED + ERROR_MSG_AND 
                                          + ERROR_MSG_TIMESTAMP_IDENTIFIER + ERROR_MSG_AND + ERROR_MSG_GUILD_ID
                                          + ERROR_MSG_PLURAL_END, "toUserId" : USER_ID});
          } else if ( errorCount == 3 ) { // If three errors, figure out which one is not an error
            if (!wagerIsError) {
              api_sendPrivateMessageAlways({"message" : ERROR_MSG_PLURAL_START + errorCount + ERROR_MSG_PLURAL_MID
                                            + ERROR_MSG_SCORE_NEEDED + ERROR_MSG_AND + ERROR_MSG_TIMESTAMP_IDENTIFIER 
                                            + ERROR_MSG_AND + ERROR_MSG_GUILD_ID + ERROR_MSG_PLURAL_END, "toUserId" : USER_ID});
            } else if (!scoreNeededGoalIsError) {
              api_sendPrivateMessageAlways({"message" : ERROR_MSG_PLURAL_START + errorCount + ERROR_MSG_PLURAL_MID
                                            + ERROR_MSG_WAGER + ERROR_MSG_AND + ERROR_MSG_TIMESTAMP_IDENTIFIER 
                                            + ERROR_MSG_AND + ERROR_MSG_GUILD_ID + ERROR_MSG_PLURAL_END, "toUserId" : USER_ID});
            } else if (!timestampIdentifierIsError) {
              api_sendPrivateMessageAlways({"message" : ERROR_MSG_PLURAL_START + errorCount + ERROR_MSG_PLURAL_MID
                                            + ERROR_MSG_WAGER + ERROR_MSG_AND + ERROR_MSG_SCORE_NEEDED + ERROR_MSG_AND 
                                            + ERROR_MSG_GUILD_ID + ERROR_MSG_PLURAL_END, "toUserId" : USER_ID});
            } else if (!guildIdError) {
              api_sendPrivateMessageAlways({"message" : ERROR_MSG_PLURAL_START + errorCount + ERROR_MSG_PLURAL_MID
                                            + ERROR_MSG_WAGER + ERROR_MSG_AND + ERROR_MSG_SCORE_NEEDED + ERROR_MSG_AND 
                                            + ERROR_MSG_TIMESTAMP_IDENTIFIER + ERROR_MSG_PLURAL_END, "toUserId" : USER_ID});
            } else {
              api_sendPrivateMessageAlways({"message" : ERROR_MSG_PLURAL_START + errorCount + ERROR_MSG_PLURAL_MID + "UNKNOWN" + ERROR_MSG_SINGULAR_END, "toUserId" : USER_ID}); 
            }
          } else if ( errorCount == 2 ) { // If two errors, figure out which two
            if (wagerIsError) { // This section is for the errors being Wager and something else
              if (scoreNeededGoalIsError){
                api_sendPrivateMessageAlways({"message" :  ERROR_MSG_PLURAL_START + errorCount + ERROR_MSG_PLURAL_MID + ERROR_MSG_WAGER + ERROR_MSG_AND + ERROR_MSG_SCORE_NEEDED + ERROR_MSG_PLURAL_END, "toUserId" : USER_ID});
              }
              else if (timestampIdentifierIsError) {
                api_sendPrivateMessageAlways({"message" : ERROR_MSG_PLURAL_START + errorCount + ERROR_MSG_PLURAL_MID + ERROR_MSG_WAGER + ERROR_MSG_AND + ERROR_MSG_TIMESTAMP_IDENTIFIER + ERROR_MSG_PLURAL_END, "toUserId" : USER_ID});
              }
              else if (guildIdError) {
                api_sendPrivateMessageAlways({"message" : ERROR_MSG_PLURAL_START + errorCount + ERROR_MSG_PLURAL_MID + ERROR_MSG_WAGER + ERROR_MSG_AND + ERROR_MSG_GUILD_ID + ERROR_MSG_PLURAL_END, "toUserId" : USER_ID});
              }
              else {
                api_sendPrivateMessageAlways({"message" : ERROR_MSG_PLURAL_START + errorCount + ERROR_MSG_PLURAL_MID + ERROR_MSG_WAGER + ERROR_MSG_AND + "UNKNOWN" + ERROR_MSG_PLURAL_END, "toUserId" : USER_ID});
              }
            } else if (scoreNeededGoalIsError) {  // This section is for the errors being Score Needed Goal and something else 
              if (timestampIdentifierIsError) {
                api_sendPrivateMessageAlways({"message" : ERROR_MSG_PLURAL_START + errorCount + ERROR_MSG_PLURAL_MID + ERROR_MSG_SCORE_NEEDED + ERROR_MSG_AND + ERROR_MSG_TIMESTAMP_IDENTIFIER + ERROR_MSG_PLURAL_END, "toUserId" : USER_ID});
              }
              else if (guildIdError) {
                api_sendPrivateMessageAlways({"message" : ERROR_MSG_PLURAL_START + errorCount + ERROR_MSG_PLURAL_MID + ERROR_MSG_SCORE_NEEDED + ERROR_MSG_AND + ERROR_MSG_GUILD_ID + ERROR_MSG_PLURAL_END, "toUserId" : USER_ID});
              }
              else {
                api_sendPrivateMessageAlways({"message" : ERROR_MSG_PLURAL_START + errorCount + ERROR_MSG_PLURAL_MID +  ERROR_MSG_SCORE_NEEDED + ERROR_MSG_AND + "UNKNOWN" + ERROR_MSG_PLURAL_END, "toUserId" : USER_ID});
              }
            } else if (timestampIdentifierIsError) { // This section is for the errors being Timestamp Identifier and something else
              if (guildIdError) {
                api_sendPrivateMessageAlways({"message" : ERROR_MSG_PLURAL_START + errorCount + ERROR_MSG_PLURAL_MID + ERROR_MSG_TIMESTAMP_IDENTIFIER + ERROR_MSG_AND + ERROR_MSG_GUILD_ID + ERROR_MSG_PLURAL_END, "toUserId" : USER_ID});
              }
              else {
                api_sendPrivateMessageAlways({"message" : ERROR_MSG_PLURAL_START + errorCount + ERROR_MSG_PLURAL_MID +  ERROR_MSG_TIMESTAMP_IDENTIFIER + ERROR_MSG_AND + "UNKNOWN" + ERROR_MSG_PLURAL_END, "toUserId" : USER_ID});
              }
            } else if (guildIdError) {
              api_sendPrivateMessageAlways({"message" : ERROR_MSG_PLURAL_START + errorCount + ERROR_MSG_PLURAL_MID +  ERROR_MSG_GUILD_ID + ERROR_MSG_AND + "UNKNOWN" + ERROR_MSG_PLURAL_END, "toUserId" : USER_ID});
            }
          } else {
            api_sendPrivateMessageAlways({"message" : ERROR_MSG_PLURAL_START + errorCount + ERROR_MSG_PLURAL_MID + "UNKNOWN" + ERROR_MSG_PLURAL_END, "toUserId" : USER_ID});
          }
        }
        return false; // Indicates errors
      }
    }

    // Checks GP and starts duel
    function checkGpAndStartDuel(buttonToDeleteTaskId, duelCurrentlyActiveKey, duelScoreKey, selfUsernameKey, selfUsername, opponentUsernameKey, opponentUsername, wagerKey, wager, scoreNeededGoalKey, scoreNeededGoal, guildIdKey, guildId, announcerBotUsernameKey, announcerBotUsername, timestampIdentifierKey, timestampIdentifier){
      const responseUser = api_getAuthenticatedUserProfile("stats");
      const user = JSON.parse(responseUser).data;
      
      let gp = user.stats.gp;
      
      // If not enough GP, send error message. If enough, deduct wager and start duel.
      if ( gp < wager ) {
        api_sendPrivateMessageAlways({"message" : MSG_INSUFFICIENT_GP, "toUserId" : USER_ID});
      } else {
        api_updateUser({"stats.gp" : gp - wager});
        
        // Start duel
        let duelCurrentlyActive = 1;
        let duelScore = 0;
        
        // Save values
        scriptProperties.setProperty(duelCurrentlyActiveKey, duelCurrentlyActive);
        scriptProperties.setProperty(duelScoreKey, duelScore);
        scriptProperties.setProperty(selfUsernameKey, selfUsername);
        scriptProperties.setProperty(opponentUsernameKey, opponentUsername);
        scriptProperties.setProperty(wagerKey, wager);
        scriptProperties.setProperty(scoreNeededGoalKey, scoreNeededGoal);
        scriptProperties.setProperty(guildIdKey, guildId);
        scriptProperties.setProperty(announcerBotUsernameKey, announcerBotUsername);
        scriptProperties.setProperty(timestampIdentifierKey, timestampIdentifier);
        
        api_sendPrivateMessage({"message" : "Your duel against " + opponentUsername + " begins now!", "toUserId" : USER_ID});
        
        // Create the other two buttons (Duel Score and Duel End)
        api_createNewTaskForUser([DUEL_END_BUTTON, DUEL_SCORE_BUTTON]);
        
        // If relevant, add tag to task (i.e. only if the user created a tag for these buttons)
        checkAndAddTagToTask(DUEL_SCORE_ALIAS, DUEL_END_ALIAS);

        // Delete the Duel Start button
        api_deleteTask(buttonToDeleteTaskId);
      }
    }

    // Creates hash of the duel parameters
    function createDuelHash(selfUsernameKey, opponentUsernameKey, wagerKey, scoreNeededGoalKey, timestampIdentifierKey) {
      // Retrieve saved values
      var selfUsername = scriptProperties.getProperty(selfUsernameKey); 
      var opponentUsername = scriptProperties.getProperty(opponentUsernameKey);
      var wager = Number(scriptProperties.getProperty(wagerKey));
      var scoreNeededGoal = Number(scriptProperties.getProperty(scoreNeededGoalKey));
      var timestampIdentifier = Number(scriptProperties.getProperty(timestampIdentifierKey));
      
      // Combine self&opponent usernames, then sort characters alphabetically.
      // This will ensure it's the same regardless of which participant is "self" and which is "opponent"
      let alphabeticalCombinedUsernames = alphabetizeString(selfUsername, opponentUsername);
      
      // Create string of all duel parameters.
      let SEMICOLON = ";";
      let ALL_PARAMETERS = alphabeticalCombinedUsernames + SEMICOLON + wager + SEMICOLON + scoreNeededGoal + SEMICOLON
      + timestampIdentifier + SEMICOLON;
      
      // Create hash
      let hashAll = createHash(ALL_PARAMETERS);
      
      return hashAll;
    }

    // Parses the Duel End string received from the announcer bot script. Check if valid. Declare winner.
    function parseDuelEndString(string, hashAllExpected, hashSumIfWinner){
      // Count number of semicolons (2 are expected).
      let countSemicolons = ( string.match(/\;/g) || [] ).length;
      if (countSemicolons != 2) {
        return -2; // To indicate it's an invalid string
      } else {
        // Parse out first hash
        let semicolonIndex = findIndexOfSemicolon(string);
        let hashAllTemp = createSubstring(string, 0, semicolonIndex);
        let hashAllParsed = parseFloat(hashAllTemp);

        // Parse out second hash
        let length = string.length;
        let substringTemp = createSubstring(string, semicolonIndex + 1, length);
        semicolonIndex = findIndexOfSemicolon(substringTemp);
        let hashSumTemp = createSubstring(substringTemp, 0, semicolonIndex);
        let hashSumParsed = parseFloat(hashSumTemp);

        // Compare the first hash to what's expected (given the duel parameters)
        if (hashAllParsed != hashAllExpected) {
          return -2; // To indicate it's an invalid string, the hashes don't match
        } else { // If it's a valid string, check if winner
          if (hashSumParsed == hashSumIfWinner) {
            return 5; // To indicate winner
          } else {
            return 3; // To indicate you didn't win
          }
        }
      }
    }

    // Resets saved duel values
    function resetDuelValues(){
      scriptProperties.setProperty(DUEL_CURRENTLY_ACTIVE_KEY, 0);
      scriptProperties.setProperty(DUEL_SCORE_KEY, 0);
      scriptProperties.setProperty(SELF_USERNAME_KEY, "self");
      scriptProperties.setProperty(OPPONENT_USERNAME_KEY, "name");
      scriptProperties.setProperty(WAGER_KEY, 0);
      scriptProperties.setProperty(SCORE_NEEDED_GOAL_KEY, 0);
      scriptProperties.setProperty(GUILD_ID_KEY, "string");
      scriptProperties.setProperty(ANNOUNCER_BOT_USERNAME_KEY, "name");
      scriptProperties.setProperty(TIMESTAMP_IDENTIFIER_KEY, 0);
      scriptProperties.setProperty(TROUBLESHOOTING_KEY, 0);
    }
